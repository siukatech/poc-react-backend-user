server:
  port: 28081

spring:
  output:
    ansi:
      enabled: always
  threads:
    virtual:
      enabled: true

  cache:
##    cache-names: user
#    type: simple

    type: ehcache
    ehcache:
      time-to-live: 5m

#    type: redis
#    redis:
#      time-to-live: 5m
#  data:
#    redis:
#      host: localhost
#      port: 36379
##      port: 36380
##      username: default
#      password: redispass
##      lettuce:
##        pool:
##          enabled: true
##        sentinel:
##          username: fbuser01
##          password: ${spring.data.redis.password}
##          master: redis

# This is not working
#  autoconfigure:
#    exclude: org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        ddl-auto: none
        show-sql: true
        format-sql: true

  datasource:
    url: jdbc:postgresql://${db-hostname}/${db-name}
    username: ${db-username}
    password: ${db-password}
    initialization-mode: always
    initialize: true
    bak-schema: classpath:/schema.sql
    continue-on-error: true

# properties for react-backend-core
# scope: openid is required to keycloak
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: ${client-id}
            client-secret: ${client-secret}
            authorization-grant-type: authorization_code
            scope: openid,profile,email
            redirect-uri: ${oauth2-client-redirect-uri}

        provider:
          keycloak:
            authorization-uri: '${oauth2-client-keycloak}/realms/${client-realm}/protocol/openid-connect/auth'
            token-uri: "${oauth2-client-keycloak}/realms/${client-realm}/protocol/openid-connect/token"
            user-info-uri: ${oauth2-client-keycloak}/realms/${client-realm}/protocol/openid-connect/userinfo
            issuer-uri: ${oauth2-client-keycloak}/realms/${client-realm}
            jwk-set-uri: ${oauth2-client-keycloak}/realms/${client-realm}/protocol/openid-connect/certs
            user-name-attribute: preferred_username

      resource-server:
        jwt:
          keycloak:
            issuer-uri: ${oauth2-client-keycloak}/realms/${client-realm}
        opaque-token:
          keycloak:
            introspection-uri: ${oauth2-client-keycloak}/realms/${client-realm}/protocol/openid-connect/token/introspect


management:
  endpoints:
    web:
      exposure:
        include: '*'
  tracing:
    sampling:
      probability: 1.0
  metrics:
    distribution:
      percentiles-histogram:
        greeting: true
        http:
          server:
            requests: true


app:
  application-id: backend-app
#  host-name: http://localhost:28080
#  api:
##    my-user-info: /v1/protected/my/user-info
#    my-key-info: /v1/protected/my/key-info


logging:
#  pattern:
##    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
#    level: "%5p [${spring.application.name:}-%X{traceId:-}-%X{spanId:-}]"
#  structured:
#    format:
#      console: ecs
  level:
#    root: DEBUG
    org.hibernate.SQL: DEBUG
    # BasicBinder is not working
#    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.hibernate.orm.jdbc.bind: TRACE
#    org.springframework.web: TRACE
    org.springframework.security: TRACE
    org.springframework.http.client: TRACE
    org.springframework.data.redis: DEBUG
    org.springframework.web.servlet.DispatcherServlet: DEBUG
    com.siukatech.poc.react.backend.module.core: TRACE
    com.siukatech.poc.react.backend.module.core.config: DEBUG
    com.siukatech.poc.react.backend.module.user: DEBUG
    com.siukatech.poc.react.backend.module.user.caching: DEBUG
    com.siukatech.poc.react.backend.module.user.config: DEBUG
    com.siukatech.poc.react.backend.user: DEBUG

